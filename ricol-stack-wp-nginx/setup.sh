#!/bin/bash

# Ricol Stack - Script de Configura√ß√£o
# Este script ajuda a configurar o ambiente WordPress com Nginx

set -e

echo "üöÄ Ricol Stack - Configura√ß√£o Inicial"
echo "======================================"

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para imprimir mensagens coloridas
print_message() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[AVISO]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERRO]${NC} $1"
}

print_step() {
    echo -e "${BLUE}[PASSO]${NC} $1"
}

# Verificar se o Docker est√° instalado
check_docker() {
    print_step "Verificando se o Docker est√° instalado..."
    if ! command -v docker &> /dev/null; then
        print_error "Docker n√£o est√° instalado. Por favor, instale o Docker primeiro."
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        print_error "Docker Compose n√£o est√° instalado. Por favor, instale o Docker Compose primeiro."
        exit 1
    fi
    
    print_message "Docker e Docker Compose est√£o instalados."
}

# Verificar se as redes necess√°rias existem
check_networks() {
    print_step "Verificando redes Docker..."
    
    if ! docker network ls | grep -q "sr-reverse-proxy"; then
        print_warning "Rede 'sr-reverse-proxy' n√£o encontrada. Criando..."
        docker network create sr-reverse-proxy
        print_message "Rede 'sr-reverse-proxy' criada."
    else
        print_message "Rede 'sr-reverse-proxy' j√° existe."
    fi
    
    if ! docker network ls | grep -q "sr-public_network"; then
        print_warning "Rede 'sr-public_network' n√£o encontrada. Criando..."
        docker network create sr-public_network
        print_message "Rede 'sr-public_network' criada."
    else
        print_message "Rede 'sr-public_network' j√° existe."
    fi
}

# Solicitar informa√ß√µes do usu√°rio
get_user_input() {
    print_step "Configurando vari√°veis do projeto..."
    
    read -p "Digite o nome do site (ex: meusite): " SITE_NAME
    read -p "Digite a URL do site (ex: meusite.com): " SITE_URL
    read -p "Digite a vers√£o do PHP (ex: 8.2-fpm): " PHP_VERSION
    read -p "Digite seu nome de usu√°rio: " USER_NAME
    
    # Valida√ß√µes b√°sicas
    if [ -z "$SITE_NAME" ] || [ -z "$SITE_URL" ] || [ -z "$PHP_VERSION" ] || [ -z "$USER_NAME" ]; then
        print_error "Todas as informa√ß√µes s√£o obrigat√≥rias."
        exit 1
    fi
    
    print_message "Configura√ß√µes coletadas com sucesso."
}

# Criar arquivo docker-compose.yml personalizado
create_docker_compose() {
    print_step "Criando arquivo docker-compose.yml personalizado..."
    
    # Fazer backup do arquivo original se existir
    if [ -f "docker-compose.yml" ]; then
        cp docker-compose.yml docker-compose.yml.backup
        print_message "Backup do docker-compose.yml criado."
    fi
    
    # Criar novo arquivo com as vari√°veis substitu√≠das
    sed "s/<SITE_NAME>/$SITE_NAME/g; s/<SITE_URL>/$SITE_URL/g; s/<PHP_IMAGE>/php:$PHP_VERSION/g; s/<USER_NAME>/$USER_NAME/g; s/<labels>/$SITE_NAME/g" docker-compose.example.yml > docker-compose.yml
    
    print_message "Arquivo docker-compose.yml criado com sucesso."
}

# Criar diret√≥rios necess√°rios
create_directories() {
    print_step "Criando diret√≥rios necess√°rios..."
    
    mkdir -p system
    mkdir -p config/php-fpm
    
    print_message "Diret√≥rios criados."
}

# Verificar se o WordPress j√° est√° instalado
check_wordpress() {
    if [ -f "system/wp-config.php" ]; then
        print_message "WordPress j√° est√° instalado no diret√≥rio system/."
        return 0
    else
        print_warning "WordPress n√£o encontrado no diret√≥rio system/."
        print_message "Voc√™ precisar√° instalar o WordPress manualmente ou usar WP-CLI."
        return 1
    fi
}

# Instru√ß√µes p√≥s-configura√ß√£o
show_next_steps() {
    echo ""
    echo "üéâ Configura√ß√£o conclu√≠da!"
    echo "=========================="
    echo ""
    echo "Pr√≥ximos passos:"
    echo "1. Execute: docker-compose up -d --build"
    echo "2. Acesse: https://$SITE_URL"
    echo ""
    echo "Para instalar o WordPress (se necess√°rio):"
    echo "1. docker-compose exec phpfpm bash"
    echo "2. wp core download --path=/var/www/html"
    echo "3. wp core install --url=$SITE_URL --title='Meu Site' --admin_user=admin --admin_password=senha123 --admin_email=admin@$SITE_URL"
    echo ""
    echo "Para ver logs:"
    echo "docker-compose logs -f"
    echo ""
    echo "Para parar os servi√ßos:"
    echo "docker-compose down"
    echo ""
}

# Fun√ß√£o principal
main() {
    check_docker
    check_networks
    get_user_input
    create_docker_compose
    create_directories
    check_wordpress
    show_next_steps
}

# Executar fun√ß√£o principal
main "$@" 